
OpenBeacon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000dda  00000e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  0080008c  0080008c  00000e9a  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018c1  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	52 c0       	rjmp	.+164    	; 0xa6 <__ctors_end>
   2:	90 c1       	rjmp	.+800    	; 0x324 <__vector_1>
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	6a c0       	rjmp	.+212    	; 0xdc <__bad_interrupt>
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	68 c0       	rjmp	.+208    	; 0xdc <__bad_interrupt>
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	66 c0       	rjmp	.+204    	; 0xdc <__bad_interrupt>
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	64 c0       	rjmp	.+200    	; 0xdc <__bad_interrupt>
  14:	d8 c2       	rjmp	.+1456   	; 0x5c6 <__vector_10>
  16:	62 c0       	rjmp	.+196    	; 0xdc <__bad_interrupt>
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	60 c0       	rjmp	.+192    	; 0xdc <__bad_interrupt>
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>

0000001e <usbDescriptorString0>:
  1e:	04 03 09 04                                         ....

00000022 <usbDescriptorStringVendor>:
  22:	12 03 45 00 74 00 68 00 65 00 72 00 6b 00 69 00     ..E.t.h.e.r.k.i.
  32:	74 00                                               t.

00000034 <usbDescriptorStringDevice>:
  34:	12 03 4f 00 70 00 65 00 6e 00 51 00 52 00 53 00     ..O.p.e.n.Q.R.S.
  44:	53 00                                               S.

00000046 <usbDescriptorDevice>:
  46:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
  56:	00 01                                               ..

00000058 <usbDescriptorConfiguration>:
  58:	09 02 12 00 01 01 00 80 32 09 04 00 00 00 00 00     ........2.......
	...

0000006a <morsechar>:
  6a:	ff 80 80 80 80 80 80 80 80 80 80 80 80 e0 80 94     ................
  7a:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
  8a:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
  9a:	68 d8 50 10 c0 30 18 70 98 b8 c8 00                 h.P..0.p....

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf e5       	ldi	r28, 0x5F	; 95
  ac:	d2 e0       	ldi	r29, 0x02	; 2
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	10 e0       	ldi	r17, 0x00	; 0
  b4:	a0 e6       	ldi	r26, 0x60	; 96
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	ea ed       	ldi	r30, 0xDA	; 218
  ba:	fd e0       	ldi	r31, 0x0D	; 13
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	ac 38       	cpi	r26, 0x8C	; 140
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	ac e8       	ldi	r26, 0x8C	; 140
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a8 3d       	cpi	r26, 0xD8	; 216
  d4:	b1 07       	cpc	r27, r17
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	21 d3       	rcall	.+1602   	; 0x71c <main>
  da:	7d c6       	rjmp	.+3322   	; 0xdd6 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
  e4:	80 91 af 00 	lds	r24, 0x00AF
  e8:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
  ea:	87 fd       	sbrc	r24, 7
  ec:	7e c0       	rjmp	.+252    	; 0x1ea <usbPoll+0x10c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
  ee:	90 91 ac 00 	lds	r25, 0x00AC
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
  f2:	20 91 ab 00 	lds	r18, 0x00AB
  f6:	2d 32       	cpi	r18, 0x2D	; 45
  f8:	09 f0       	breq	.+2      	; 0xfc <usbPoll+0x1e>
  fa:	75 c0       	rjmp	.+234    	; 0x1e6 <usbPoll+0x108>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	09 f0       	breq	.+2      	; 0x102 <usbPoll+0x24>
 100:	72 c0       	rjmp	.+228    	; 0x1e6 <usbPoll+0x108>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 102:	cc e0       	ldi	r28, 0x0C	; 12
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	c9 1b       	sub	r28, r25
 108:	d1 09       	sbc	r29, r1
 10a:	cd 54       	subi	r28, 0x4D	; 77
 10c:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 10e:	83 ec       	ldi	r24, 0xC3	; 195
 110:	80 93 9f 00 	sts	0x009F, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 114:	8a e5       	ldi	r24, 0x5A	; 90
 116:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
 11a:	10 92 8c 00 	sts	0x008C, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 11e:	88 81       	ld	r24, Y
 120:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 122:	19 f0       	breq	.+6      	; 0x12a <usbPoll+0x4c>
            replyLen = usbFunctionSetup(data);
 124:	ce 01       	movw	r24, r28
 126:	74 d2       	rcall	.+1256   	; 0x610 <usbFunctionSetup>
 128:	55 c0       	rjmp	.+170    	; 0x1d4 <usbPoll+0xf6>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 12c:	10 92 a8 00 	sts	0x00A8, r1
    SWITCH_START(rq->bRequest)
 130:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 132:	88 23       	and	r24, r24
 134:	31 f4       	brne	.+12     	; 0x142 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 136:	10 92 a9 00 	sts	0x00A9, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 13a:	28 ea       	ldi	r18, 0xA8	; 168
 13c:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	45 c0       	rjmp	.+138    	; 0x1cc <usbPoll+0xee>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 142:	85 30       	cpi	r24, 0x05	; 5
 144:	19 f4       	brne	.+6      	; 0x14c <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 146:	90 93 b0 00 	sts	0x00B0, r25
 14a:	36 c0       	rjmp	.+108    	; 0x1b8 <usbPoll+0xda>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 14c:	86 30       	cpi	r24, 0x06	; 6
 14e:	59 f5       	brne	.+86     	; 0x1a6 <usbPoll+0xc8>
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 150:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	19 f4       	brne	.+6      	; 0x15c <usbPoll+0x7e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 156:	86 e4       	ldi	r24, 0x46	; 70
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	1a c0       	rjmp	.+52     	; 0x190 <usbPoll+0xb2>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	19 f4       	brne	.+6      	; 0x166 <usbPoll+0x88>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 160:	88 e5       	ldi	r24, 0x58	; 88
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	15 c0       	rjmp	.+42     	; 0x190 <usbPoll+0xb2>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	c9 f4       	brne	.+50     	; 0x19c <usbPoll+0xbe>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 16a:	99 23       	and	r25, r25
 16c:	41 f4       	brne	.+16     	; 0x17e <usbPoll+0xa0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 16e:	8e e1       	ldi	r24, 0x1E	; 30
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 ae 00 	sts	0x00AE, r25
 176:	80 93 ad 00 	sts	0x00AD, r24
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	10 c0       	rjmp	.+32     	; 0x19e <usbPoll+0xc0>
        SWITCH_CASE(1)
 17e:	91 30       	cpi	r25, 0x01	; 1
 180:	19 f4       	brne	.+6      	; 0x188 <usbPoll+0xaa>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 182:	82 e2       	ldi	r24, 0x22	; 34
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	04 c0       	rjmp	.+8      	; 0x190 <usbPoll+0xb2>
        SWITCH_CASE(2)
 188:	92 30       	cpi	r25, 0x02	; 2
 18a:	41 f4       	brne	.+16     	; 0x19c <usbPoll+0xbe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 18c:	84 e3       	ldi	r24, 0x34	; 52
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 ae 00 	sts	0x00AE, r25
 194:	80 93 ad 00 	sts	0x00AD, r24
 198:	82 e1       	ldi	r24, 0x12	; 18
 19a:	01 c0       	rjmp	.+2      	; 0x19e <usbPoll+0xc0>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 19e:	90 e4       	ldi	r25, 0x40	; 64
 1a0:	90 93 8c 00 	sts	0x008C, r25
 1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <usbPoll+0xf6>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	59 f0       	breq	.+22     	; 0x1c0 <usbPoll+0xe2>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 1aa:	89 30       	cpi	r24, 0x09	; 9
 1ac:	19 f4       	brne	.+6      	; 0x1b4 <usbPoll+0xd6>
        usbConfiguration = value;
 1ae:	90 93 b2 00 	sts	0x00B2, r25
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <usbPoll+0xda>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 1b4:	8a 30       	cpi	r24, 0x0A	; 10
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <usbPoll+0xe8>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 1b8:	28 ea       	ldi	r18, 0xA8	; 168
 1ba:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <usbPoll+0xee>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 1c0:	22 eb       	ldi	r18, 0xB2	; 178
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <usbPoll+0xec>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 1c6:	28 ea       	ldi	r18, 0xA8	; 168
 1c8:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 1cc:	30 93 ae 00 	sts	0x00AE, r19
 1d0:	20 93 ad 00 	sts	0x00AD, r18
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 1d4:	9f 81       	ldd	r25, Y+7	; 0x07
 1d6:	99 23       	and	r25, r25
 1d8:	21 f4       	brne	.+8      	; 0x1e2 <usbPoll+0x104>
 1da:	9e 81       	ldd	r25, Y+6	; 0x06
 1dc:	98 17       	cp	r25, r24
 1de:	08 f4       	brcc	.+2      	; 0x1e2 <usbPoll+0x104>
 1e0:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 1e2:	80 93 61 00 	sts	0x0061, r24
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 1e6:	10 92 af 00 	sts	0x00AF, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 1ea:	80 91 60 00 	lds	r24, 0x0060
 1ee:	84 ff       	sbrs	r24, 4
 1f0:	4c c0       	rjmp	.+152    	; 0x28a <__stack+0x2b>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 1f2:	80 91 61 00 	lds	r24, 0x0061
 1f6:	8f 3f       	cpi	r24, 0xFF	; 255
 1f8:	09 f4       	brne	.+2      	; 0x1fc <usbPoll+0x11e>
 1fa:	47 c0       	rjmp	.+142    	; 0x28a <__stack+0x2b>
 1fc:	18 2f       	mov	r17, r24
 1fe:	89 30       	cpi	r24, 0x09	; 9
 200:	08 f0       	brcs	.+2      	; 0x204 <usbPoll+0x126>
 202:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 204:	81 1b       	sub	r24, r17
 206:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 20a:	80 91 9f 00 	lds	r24, 0x009F
 20e:	98 e8       	ldi	r25, 0x88	; 136
 210:	89 27       	eor	r24, r25
 212:	80 93 9f 00 	sts	0x009F, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 216:	11 23       	and	r17, r17
 218:	61 f1       	breq	.+88     	; 0x272 <__stack+0x13>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 21a:	80 91 ad 00 	lds	r24, 0x00AD
 21e:	90 91 ae 00 	lds	r25, 0x00AE
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 222:	30 91 8c 00 	lds	r19, 0x008C
 226:	21 2f       	mov	r18, r17
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	36 ff       	sbrs	r19, 6
 22c:	0e c0       	rjmp	.+28     	; 0x24a <usbPoll+0x16c>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	a9 01       	movw	r20, r18
 232:	4f 55       	subi	r20, 0x5F	; 95
 234:	5f 4f       	sbci	r21, 0xFF	; 255
 236:	fc 01       	movw	r30, r24
 238:	a0 ea       	ldi	r26, 0xA0	; 160
 23a:	b0 e0       	ldi	r27, 0x00	; 0
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 23c:	64 91       	lpm	r22, Z+
                    *data++ = c;
 23e:	6d 93       	st	X+, r22
                    r++;
 240:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 242:	a4 17       	cp	r26, r20
 244:	b5 07       	cpc	r27, r21
 246:	d1 f7       	brne	.-12     	; 0x23c <usbPoll+0x15e>
 248:	0c c0       	rjmp	.+24     	; 0x262 <__stack+0x3>
 24a:	dc 01       	movw	r26, r24
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	a9 01       	movw	r20, r18
 250:	4f 55       	subi	r20, 0x5F	; 95
 252:	5f 4f       	sbci	r21, 0xFF	; 255
 254:	e0 ea       	ldi	r30, 0xA0	; 160
 256:	f0 e0       	ldi	r31, 0x00	; 0
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 258:	6d 91       	ld	r22, X+
 25a:	61 93       	st	Z+, r22
                }while(--i);
 25c:	e4 17       	cp	r30, r20
 25e:	f5 07       	cpc	r31, r21
 260:	d9 f7       	brne	.-10     	; 0x258 <usbPoll+0x17a>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
                }while(--i);
 266:	28 0f       	add	r18, r24
 268:	39 1f       	adc	r19, r25
            }
            usbMsgPtr = r;
 26a:	30 93 ae 00 	sts	0x00AE, r19
 26e:	20 93 ad 00 	sts	0x00AD, r18
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 272:	80 ea       	ldi	r24, 0xA0	; 160
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	61 2f       	mov	r22, r17
 278:	3e d0       	rcall	.+124    	; 0x2f6 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 27a:	1c 5f       	subi	r17, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 27c:	1c 30       	cpi	r17, 0x0C	; 12
 27e:	19 f0       	breq	.+6      	; 0x286 <__stack+0x27>
            usbMsgLen = USB_NO_MSG;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	80 93 61 00 	sts	0x0061, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 286:	10 93 60 00 	sts	0x0060, r17
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 28a:	84 e1       	ldi	r24, 0x14	; 20
        uchar usbLineStatus = USBIN & USBMASK;
 28c:	96 b3       	in	r25, 0x16	; 22
 28e:	95 70       	andi	r25, 0x05	; 5
        if(usbLineStatus != 0)  /* SE0 has ended */
 290:	31 f4       	brne	.+12     	; 0x29e <__stack+0x3f>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 292:	81 50       	subi	r24, 0x01	; 1
 294:	d9 f7       	brne	.-10     	; 0x28c <__stack+0x2d>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 296:	10 92 b0 00 	sts	0x00B0, r1
    usbDeviceAddr = 0;
 29a:	10 92 aa 00 	sts	0x00AA, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 29e:	11 e0       	ldi	r17, 0x01	; 1
 2a0:	81 11       	cpse	r24, r1
 2a2:	10 e0       	ldi	r17, 0x00	; 0

    if(wasReset != isReset){
 2a4:	80 91 8d 00 	lds	r24, 0x008D
 2a8:	81 17       	cp	r24, r17
 2aa:	29 f0       	breq	.+10     	; 0x2b6 <__stack+0x57>
        USB_RESET_HOOK(isReset);
 2ac:	11 23       	and	r17, r17
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <__stack+0x53>
 2b0:	e3 d1       	rcall	.+966    	; 0x678 <usbEventResetReady>
        wasReset = isReset;
 2b2:	10 93 8d 00 	sts	0x008D, r17
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	08 95       	ret

000002be <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 2be:	85 b7       	in	r24, 0x35	; 53
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 2c4:	8b b7       	in	r24, 0x3b	; 59
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	8b bf       	out	0x3b, r24	; 59
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 2ca:	08 95       	ret

000002cc <usbCrc16>:
 2cc:	a8 2f       	mov	r26, r24
 2ce:	b9 2f       	mov	r27, r25
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	50 ea       	ldi	r21, 0xA0	; 160
 2d8:	60 95       	com	r22
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <usbCrcLoopEntry>

000002de <usbCrcByteLoop>:
 2de:	2d 91       	ld	r18, X+
 2e0:	82 27       	eor	r24, r18

000002e2 <usbCrcBitLoop>:
 2e2:	97 95       	ror	r25
 2e4:	87 95       	ror	r24
 2e6:	10 f0       	brcs	.+4      	; 0x2ec <usbCrcNoXor>
 2e8:	84 27       	eor	r24, r20
 2ea:	95 27       	eor	r25, r21

000002ec <usbCrcNoXor>:
 2ec:	30 5e       	subi	r19, 0xE0	; 224
 2ee:	c8 f3       	brcs	.-14     	; 0x2e2 <usbCrcBitLoop>

000002f0 <usbCrcLoopEntry>:
 2f0:	6f 5f       	subi	r22, 0xFF	; 255
 2f2:	a8 f3       	brcs	.-22     	; 0x2de <usbCrcByteLoop>

000002f4 <usbCrcReady>:
 2f4:	08 95       	ret

000002f6 <usbCrc16Append>:
 2f6:	ea df       	rcall	.-44     	; 0x2cc <usbCrc16>
 2f8:	8d 93       	st	X+, r24
 2fa:	9d 93       	st	X+, r25
 2fc:	08 95       	ret

000002fe <usbMeasureFrameLength>:
 2fe:	a6 e0       	ldi	r26, 0x06	; 6
 300:	88 27       	eor	r24, r24
 302:	99 27       	eor	r25, r25

00000304 <usbMFTime16>:
 304:	aa 95       	dec	r26
 306:	69 f0       	breq	.+26     	; 0x322 <usbMFTimeout>

00000308 <usbMFWaitStrobe>:
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	e1 f3       	breq	.-8      	; 0x304 <usbMFTime16>
 30c:	b0 99       	sbic	0x16, 0	; 22
 30e:	fc cf       	rjmp	.-8      	; 0x308 <usbMFWaitStrobe>

00000310 <usbMFWaitIdle>:
 310:	b0 9b       	sbis	0x16, 0	; 22
 312:	fe cf       	rjmp	.-4      	; 0x310 <usbMFWaitIdle>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	99 27       	eor	r25, r25

00000318 <usbMFWaitLoop>:
 318:	a6 b3       	in	r26, 0x16	; 22
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	11 f0       	breq	.+4      	; 0x322 <usbMFTimeout>
 31e:	a5 70       	andi	r26, 0x05	; 5
 320:	d9 f7       	brne	.-10     	; 0x318 <usbMFWaitLoop>

00000322 <usbMFTimeout>:
 322:	08 95       	ret

00000324 <__vector_1>:
 324:	cf 93       	push	r28
 326:	cf b7       	in	r28, 0x3f	; 63
 328:	cf 93       	push	r28

0000032a <waitForJ>:
 32a:	c3 95       	inc	r28
 32c:	b0 9b       	sbis	0x16, 0	; 22
 32e:	e9 f7       	brne	.-6      	; 0x32a <waitForJ>

00000330 <waitForK>:
 330:	b0 9b       	sbis	0x16, 0	; 22
 332:	0b c0       	rjmp	.+22     	; 0x34a <foundK>
 334:	b0 9b       	sbis	0x16, 0	; 22
 336:	09 c0       	rjmp	.+18     	; 0x34a <foundK>
 338:	b0 9b       	sbis	0x16, 0	; 22
 33a:	07 c0       	rjmp	.+14     	; 0x34a <foundK>
 33c:	b0 9b       	sbis	0x16, 0	; 22
 33e:	05 c0       	rjmp	.+10     	; 0x34a <foundK>
 340:	b0 9b       	sbis	0x16, 0	; 22
 342:	03 c0       	rjmp	.+6      	; 0x34a <foundK>
 344:	b0 9b       	sbis	0x16, 0	; 22
 346:	01 c0       	rjmp	.+2      	; 0x34a <foundK>
 348:	d3 c0       	rjmp	.+422    	; 0x4f0 <sofError>

0000034a <foundK>:
 34a:	0f 92       	push	r0
 34c:	df 93       	push	r29
 34e:	c0 91 ac 00 	lds	r28, 0x00AC
 352:	dd 27       	eor	r29, r29
 354:	cd 54       	subi	r28, 0x4D	; 77
 356:	df 4f       	sbci	r29, 0xFF	; 255
 358:	01 2e       	mov	r0, r17
 35a:	b0 9b       	sbis	0x16, 0	; 22
 35c:	03 c0       	rjmp	.+6      	; 0x364 <haveTwoBitsK>
 35e:	df 91       	pop	r29
 360:	0f 90       	pop	r0
 362:	e6 cf       	rjmp	.-52     	; 0x330 <waitForK>

00000364 <haveTwoBitsK>:
 364:	2f 93       	push	r18
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	4f 93       	push	r20
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	4f 6f       	ori	r20, 0xFF	; 255
 370:	06 b3       	in	r16, 0x16	; 22
 372:	00 fb       	bst	r16, 0
 374:	20 f9       	bld	r18, 0
 376:	5f 93       	push	r21
 378:	3f 93       	push	r19
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	3b e0       	ldi	r19, 0x0B	; 11
 37e:	65 c0       	rjmp	.+202    	; 0x44a <rxbit1>

00000380 <continueWithBit5>:
 380:	16 b3       	in	r17, 0x16	; 22
 382:	01 26       	eor	r0, r17
 384:	50 29       	or	r21, r0
 386:	50 fd       	sbrc	r21, 0
 388:	c8 95       	lpm
 38a:	56 b3       	in	r21, 0x16	; 22
 38c:	01 27       	eor	r16, r17
 38e:	00 fb       	bst	r16, 0
 390:	25 f9       	bld	r18, 5
 392:	2f 73       	andi	r18, 0x3F	; 63
 394:	06 b3       	in	r16, 0x16	; 22
 396:	b1 f0       	breq	.+44     	; 0x3c4 <unstuff5>
 398:	50 27       	eor	r21, r16
 39a:	10 27       	eor	r17, r16
 39c:	10 fb       	bst	r17, 0
 39e:	26 f9       	bld	r18, 6

000003a0 <didUnstuff6>:
 3a0:	06 b2       	in	r0, 0x16	; 22
 3a2:	22 30       	cpi	r18, 0x02	; 2
 3a4:	f0 f0       	brcs	.+60     	; 0x3e2 <unstuff6>

000003a6 <didUnstuff5>:
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <didUnstuff5+0x2>
 3a8:	16 b3       	in	r17, 0x16	; 22
 3aa:	01 27       	eor	r16, r17
 3ac:	00 fb       	bst	r16, 0
 3ae:	27 f9       	bld	r18, 7

000003b0 <didUnstuff7>:
 3b0:	01 26       	eor	r0, r17
 3b2:	50 29       	or	r21, r0
 3b4:	06 b2       	in	r0, 0x16	; 22
 3b6:	24 30       	cpi	r18, 0x04	; 4
 3b8:	e8 f5       	brcc	.+122    	; 0x434 <rxLoop>

000003ba <unstuff7>:
 3ba:	4f 77       	andi	r20, 0x7F	; 127
 3bc:	20 68       	ori	r18, 0x80	; 128
 3be:	16 b3       	in	r17, 0x16	; 22
 3c0:	00 00       	nop
 3c2:	f6 cf       	rjmp	.-20     	; 0x3b0 <didUnstuff7>

000003c4 <unstuff5>:
 3c4:	50 27       	eor	r21, r16
 3c6:	4f 7d       	andi	r20, 0xDF	; 223
 3c8:	20 62       	ori	r18, 0x20	; 32
 3ca:	06 b2       	in	r0, 0x16	; 22
 3cc:	10 2f       	mov	r17, r16
 3ce:	00 00       	nop
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <unstuff5+0xe>
 3d2:	06 b3       	in	r16, 0x16	; 22
 3d4:	00 26       	eor	r0, r16
 3d6:	50 29       	or	r21, r0
 3d8:	10 27       	eor	r17, r16
 3da:	10 fb       	bst	r17, 0
 3dc:	26 f9       	bld	r18, 6
 3de:	06 b2       	in	r0, 0x16	; 22
 3e0:	e2 cf       	rjmp	.-60     	; 0x3a6 <didUnstuff5>

000003e2 <unstuff6>:
 3e2:	4f 7b       	andi	r20, 0xBF	; 191
 3e4:	06 b3       	in	r16, 0x16	; 22
 3e6:	20 64       	ori	r18, 0x40	; 64
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <unstuff6+0x8>
 3ea:	da cf       	rjmp	.-76     	; 0x3a0 <didUnstuff6>

000003ec <unstuff0>:
 3ec:	01 26       	eor	r0, r17
 3ee:	50 29       	or	r21, r0
 3f0:	15 70       	andi	r17, 0x05	; 5
 3f2:	06 b2       	in	r0, 0x16	; 22
 3f4:	69 f1       	breq	.+90     	; 0x450 <didUnstuff0>
 3f6:	4e 7f       	andi	r20, 0xFE	; 254
 3f8:	21 60       	ori	r18, 0x01	; 1
 3fa:	01 2f       	mov	r16, r17
 3fc:	16 b3       	in	r17, 0x16	; 22
 3fe:	28 c0       	rjmp	.+80     	; 0x450 <didUnstuff0>

00000400 <unstuff1>:
 400:	00 26       	eor	r0, r16
 402:	50 29       	or	r21, r0
 404:	4d 7f       	andi	r20, 0xFD	; 253
 406:	06 b2       	in	r0, 0x16	; 22
 408:	22 60       	ori	r18, 0x02	; 2
 40a:	10 2f       	mov	r17, r16
 40c:	29 c0       	rjmp	.+82     	; 0x460 <didUnstuff1>

0000040e <unstuff2>:
 40e:	01 26       	eor	r0, r17
 410:	50 29       	or	r21, r0
 412:	4b 7f       	andi	r20, 0xFB	; 251
 414:	06 b2       	in	r0, 0x16	; 22
 416:	24 60       	ori	r18, 0x04	; 4
 418:	01 2f       	mov	r16, r17
 41a:	2d c0       	rjmp	.+90     	; 0x476 <didUnstuff2>

0000041c <unstuff3>:
 41c:	16 b3       	in	r17, 0x16	; 22
 41e:	01 26       	eor	r0, r17
 420:	50 29       	or	r21, r0
 422:	47 7f       	andi	r20, 0xF7	; 247
 424:	28 60       	ori	r18, 0x08	; 8
 426:	00 00       	nop
 428:	06 b2       	in	r0, 0x16	; 22
 42a:	2e c0       	rjmp	.+92     	; 0x488 <didUnstuff3>

0000042c <unstuff4>:
 42c:	4f 7e       	andi	r20, 0xEF	; 239
 42e:	06 b3       	in	r16, 0x16	; 22
 430:	20 61       	ori	r18, 0x10	; 16
 432:	30 c0       	rjmp	.+96     	; 0x494 <didUnstuff4>

00000434 <rxLoop>:
 434:	42 27       	eor	r20, r18
 436:	06 b3       	in	r16, 0x16	; 22
 438:	49 93       	st	Y+, r20
 43a:	00 26       	eor	r0, r16
 43c:	50 29       	or	r21, r0
 43e:	10 27       	eor	r17, r16
 440:	06 b2       	in	r0, 0x16	; 22
 442:	4f ef       	ldi	r20, 0xFF	; 255
 444:	10 fb       	bst	r17, 0
 446:	20 f9       	bld	r18, 0
 448:	29 7f       	andi	r18, 0xF9	; 249

0000044a <rxbit1>:
 44a:	16 b3       	in	r17, 0x16	; 22
 44c:	79 f2       	breq	.-98     	; 0x3ec <unstuff0>
 44e:	15 70       	andi	r17, 0x05	; 5

00000450 <didUnstuff0>:
 450:	59 f1       	breq	.+86     	; 0x4a8 <se0>
 452:	01 26       	eor	r0, r17
 454:	50 29       	or	r21, r0
 456:	06 b2       	in	r0, 0x16	; 22
 458:	01 27       	eor	r16, r17
 45a:	00 fb       	bst	r16, 0
 45c:	21 f9       	bld	r18, 1
 45e:	23 7f       	andi	r18, 0xF3	; 243

00000460 <didUnstuff1>:
 460:	06 b3       	in	r16, 0x16	; 22
 462:	71 f2       	breq	.-100    	; 0x400 <unstuff1>
 464:	00 26       	eor	r0, r16
 466:	50 29       	or	r21, r0
 468:	31 50       	subi	r19, 0x01	; 1
 46a:	d0 f0       	brcs	.+52     	; 0x4a0 <overflow>
 46c:	06 b2       	in	r0, 0x16	; 22
 46e:	10 27       	eor	r17, r16
 470:	10 fb       	bst	r17, 0
 472:	22 f9       	bld	r18, 2
 474:	27 7e       	andi	r18, 0xE7	; 231

00000476 <didUnstuff2>:
 476:	16 b3       	in	r17, 0x16	; 22
 478:	51 f2       	breq	.-108    	; 0x40e <unstuff2>
 47a:	01 26       	eor	r0, r17
 47c:	50 29       	or	r21, r0
 47e:	01 27       	eor	r16, r17
 480:	00 fb       	bst	r16, 0
 482:	06 b2       	in	r0, 0x16	; 22
 484:	23 f9       	bld	r18, 3
 486:	2f 7c       	andi	r18, 0xCF	; 207

00000488 <didUnstuff3>:
 488:	49 f2       	breq	.-110    	; 0x41c <unstuff3>
 48a:	00 00       	nop
 48c:	06 b3       	in	r16, 0x16	; 22
 48e:	10 27       	eor	r17, r16
 490:	10 fb       	bst	r17, 0
 492:	24 f9       	bld	r18, 4

00000494 <didUnstuff4>:
 494:	00 26       	eor	r0, r16
 496:	50 29       	or	r21, r0
 498:	06 b2       	in	r0, 0x16	; 22
 49a:	2f 79       	andi	r18, 0x9F	; 159
 49c:	39 f2       	breq	.-114    	; 0x42c <unstuff4>
 49e:	70 cf       	rjmp	.-288    	; 0x380 <continueWithBit5>

000004a0 <overflow>:
 4a0:	10 e4       	ldi	r17, 0x40	; 64
 4a2:	1a bf       	out	0x3a, r17	; 58

000004a4 <ignorePacket>:
 4a4:	00 27       	eor	r16, r16
 4a6:	17 c0       	rjmp	.+46     	; 0x4d6 <handleSetupOrOut>

000004a8 <se0>:
 4a8:	3b 50       	subi	r19, 0x0B	; 11
 4aa:	31 95       	neg	r19
 4ac:	c3 1b       	sub	r28, r19
 4ae:	d0 40       	sbci	r29, 0x00	; 0
 4b0:	10 e4       	ldi	r17, 0x40	; 64
 4b2:	1a bf       	out	0x3a, r17	; 58
 4b4:	08 81       	ld	r16, Y
 4b6:	03 3c       	cpi	r16, 0xC3	; 195
 4b8:	f9 f0       	breq	.+62     	; 0x4f8 <handleData>
 4ba:	0b 34       	cpi	r16, 0x4B	; 75
 4bc:	e9 f0       	breq	.+58     	; 0x4f8 <handleData>
 4be:	20 91 aa 00 	lds	r18, 0x00AA
 4c2:	19 81       	ldd	r17, Y+1	; 0x01
 4c4:	11 0f       	add	r17, r17
 4c6:	12 13       	cpse	r17, r18
 4c8:	ed cf       	rjmp	.-38     	; 0x4a4 <ignorePacket>
 4ca:	09 36       	cpi	r16, 0x69	; 105
 4cc:	51 f1       	breq	.+84     	; 0x522 <handleIn>
 4ce:	0d 32       	cpi	r16, 0x2D	; 45
 4d0:	11 f0       	breq	.+4      	; 0x4d6 <handleSetupOrOut>
 4d2:	01 3e       	cpi	r16, 0xE1	; 225
 4d4:	39 f7       	brne	.-50     	; 0x4a4 <ignorePacket>

000004d6 <handleSetupOrOut>:
 4d6:	00 93 b1 00 	sts	0x00B1, r16

000004da <doReturn>:
 4da:	3f 91       	pop	r19
 4dc:	5f 91       	pop	r21
 4de:	4f 91       	pop	r20
 4e0:	1f 91       	pop	r17
 4e2:	0f 91       	pop	r16
 4e4:	2f 91       	pop	r18
 4e6:	df 91       	pop	r29
 4e8:	0f 90       	pop	r0
 4ea:	ca b7       	in	r28, 0x3a	; 58
 4ec:	c6 fd       	sbrc	r28, 6
 4ee:	1d cf       	rjmp	.-454    	; 0x32a <waitForJ>

000004f0 <sofError>:
 4f0:	cf 91       	pop	r28
 4f2:	cf bf       	out	0x3f, r28	; 63
 4f4:	cf 91       	pop	r28
 4f6:	18 95       	reti

000004f8 <handleData>:
 4f8:	20 91 b1 00 	lds	r18, 0x00B1
 4fc:	22 23       	and	r18, r18
 4fe:	69 f3       	breq	.-38     	; 0x4da <doReturn>
 500:	10 91 af 00 	lds	r17, 0x00AF
 504:	11 23       	and	r17, r17
 506:	21 f5       	brne	.+72     	; 0x550 <sendNakAndReti>
 508:	34 30       	cpi	r19, 0x04	; 4
 50a:	22 f1       	brmi	.+72     	; 0x554 <sendAckAndReti>
 50c:	30 93 af 00 	sts	0x00AF, r19
 510:	20 93 ab 00 	sts	0x00AB, r18
 514:	10 91 ac 00 	lds	r17, 0x00AC
 518:	3b e0       	ldi	r19, 0x0B	; 11
 51a:	31 1b       	sub	r19, r17
 51c:	30 93 ac 00 	sts	0x00AC, r19
 520:	19 c0       	rjmp	.+50     	; 0x554 <sendAckAndReti>

00000522 <handleIn>:
 522:	00 91 af 00 	lds	r16, 0x00AF
 526:	01 30       	cpi	r16, 0x01	; 1
 528:	9c f4       	brge	.+38     	; 0x550 <sendNakAndReti>
 52a:	0a e5       	ldi	r16, 0x5A	; 90
 52c:	30 91 60 00 	lds	r19, 0x0060
 530:	34 fd       	sbrc	r19, 4
 532:	11 c0       	rjmp	.+34     	; 0x556 <sendCntAndReti>
 534:	00 93 60 00 	sts	0x0060, r16
 538:	cf e9       	ldi	r28, 0x9F	; 159
 53a:	d0 e0       	ldi	r29, 0x00	; 0
 53c:	10 c0       	rjmp	.+32     	; 0x55e <usbSendAndReti>

0000053e <bitstuff7>:
 53e:	05 27       	eor	r16, r21
 540:	10 e0       	ldi	r17, 0x00	; 0
 542:	00 c0       	rjmp	.+0      	; 0x544 <bitstuff7+0x6>
 544:	21 c0       	rjmp	.+66     	; 0x588 <didStuff7>

00000546 <bitstuffN>:
 546:	05 27       	eor	r16, r21
 548:	10 e0       	ldi	r17, 0x00	; 0
 54a:	c8 95       	lpm
 54c:	08 bb       	out	0x18, r16	; 24
 54e:	14 c0       	rjmp	.+40     	; 0x578 <didStuffN>

00000550 <sendNakAndReti>:
 550:	3a e5       	ldi	r19, 0x5A	; 90
 552:	01 c0       	rjmp	.+2      	; 0x556 <sendCntAndReti>

00000554 <sendAckAndReti>:
 554:	32 ed       	ldi	r19, 0xD2	; 210

00000556 <sendCntAndReti>:
 556:	03 2e       	mov	r0, r19
 558:	c0 e0       	ldi	r28, 0x00	; 0
 55a:	d0 e0       	ldi	r29, 0x00	; 0
 55c:	32 e0       	ldi	r19, 0x02	; 2

0000055e <usbSendAndReti>:
 55e:	17 b3       	in	r17, 0x17	; 23
 560:	15 60       	ori	r17, 0x05	; 5
 562:	c0 9a       	sbi	0x18, 0	; 24
 564:	08 b3       	in	r16, 0x18	; 24
 566:	17 bb       	out	0x17, r17	; 23
 568:	55 e0       	ldi	r21, 0x05	; 5
 56a:	20 e8       	ldi	r18, 0x80	; 128
 56c:	4f ef       	ldi	r20, 0xFF	; 255

0000056e <bitloop>:
 56e:	20 ff       	sbrs	r18, 0
 570:	05 27       	eor	r16, r21
 572:	08 bb       	out	0x18, r16	; 24
 574:	27 95       	ror	r18
 576:	17 95       	ror	r17

00000578 <didStuffN>:
 578:	1c 3f       	cpi	r17, 0xFC	; 252
 57a:	28 f7       	brcc	.-54     	; 0x546 <bitstuffN>
 57c:	00 00       	nop
 57e:	45 52       	subi	r20, 0x25	; 37
 580:	b0 f7       	brcc	.-20     	; 0x56e <bitloop>
 582:	20 ff       	sbrs	r18, 0
 584:	05 27       	eor	r16, r21
 586:	27 95       	ror	r18

00000588 <didStuff7>:
 588:	08 bb       	out	0x18, r16	; 24
 58a:	17 95       	ror	r17
 58c:	1c 3f       	cpi	r17, 0xFC	; 252
 58e:	b8 f6       	brcc	.-82     	; 0x53e <bitstuff7>
 590:	29 91       	ld	r18, Y+
 592:	3a 95       	dec	r19
 594:	61 f7       	brne	.-40     	; 0x56e <bitloop>
 596:	0a 7f       	andi	r16, 0xFA	; 250
 598:	10 91 b0 00 	lds	r17, 0x00B0
 59c:	11 0f       	add	r17, r17
 59e:	08 bb       	out	0x18, r16	; 24
 5a0:	c2 50       	subi	r28, 0x02	; 2
 5a2:	d0 40       	sbci	r29, 0x00	; 0
 5a4:	11 f0       	breq	.+4      	; 0x5aa <skipAddrAssign>
 5a6:	10 93 aa 00 	sts	0x00AA, r17

000005aa <skipAddrAssign>:
 5aa:	10 e4       	ldi	r17, 0x40	; 64
 5ac:	1a bf       	out	0x3a, r17	; 58
 5ae:	01 60       	ori	r16, 0x01	; 1
 5b0:	17 b3       	in	r17, 0x17	; 23
 5b2:	1a 7f       	andi	r17, 0xFA	; 250
 5b4:	40 2f       	mov	r20, r16
 5b6:	4a 7f       	andi	r20, 0xFA	; 250
 5b8:	54 e0       	ldi	r21, 0x04	; 4

000005ba <se0Delay>:
 5ba:	5a 95       	dec	r21
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <se0Delay>
 5be:	08 bb       	out	0x18, r16	; 24
 5c0:	17 bb       	out	0x17, r17	; 23
 5c2:	48 bb       	out	0x18, r20	; 24
 5c4:	8a cf       	rjmp	.-236    	; 0x4da <doReturn>

000005c6 <__vector_10>:
// Function prototypes
void set_wpm(uint16_t);

// Interrupt service routines
ISR(TIM0_COMPA_vect)
{
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
	// Tick the clock
	timer++;
 5d8:	80 91 ca 00 	lds	r24, 0x00CA
 5dc:	90 91 cb 00 	lds	r25, 0x00CB
 5e0:	a0 91 cc 00 	lds	r26, 0x00CC
 5e4:	b0 91 cd 00 	lds	r27, 0x00CD
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	a1 1d       	adc	r26, r1
 5ec:	b1 1d       	adc	r27, r1
 5ee:	80 93 ca 00 	sts	0x00CA, r24
 5f2:	90 93 cb 00 	sts	0x00CB, r25
 5f6:	a0 93 cc 00 	sts	0x00CC, r26
 5fa:	b0 93 cd 00 	sts	0x00CD, r27
}
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	0f 90       	pop	r0
 608:	0f be       	out	0x3f, r0	; 63
 60a:	0f 90       	pop	r0
 60c:	1f 90       	pop	r1
 60e:	18 95       	reti

00000610 <usbFunctionSetup>:


usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
 610:	fc 01       	movw	r30, r24
static uchar    dataBuffer[4];  /* buffer must stay valid when usbFunctionSetup returns */

    if(rq->bRequest == CUSTOM_RQ_ECHO){ /* echo -- used for reliability tests */
 612:	81 81       	ldd	r24, Z+1	; 0x01
 614:	88 23       	and	r24, r24
 616:	a1 f4       	brne	.+40     	; 0x640 <usbFunctionSetup+0x30>
        dataBuffer[0] = rq->wValue.bytes[0];
 618:	82 81       	ldd	r24, Z+2	; 0x02
 61a:	80 93 9b 00 	sts	0x009B, r24
        dataBuffer[1] = rq->wValue.bytes[1];
 61e:	83 81       	ldd	r24, Z+3	; 0x03
 620:	80 93 9c 00 	sts	0x009C, r24
        dataBuffer[2] = rq->wIndex.bytes[0];
 624:	84 81       	ldd	r24, Z+4	; 0x04
 626:	80 93 9d 00 	sts	0x009D, r24
        dataBuffer[3] = rq->wIndex.bytes[1];
 62a:	85 81       	ldd	r24, Z+5	; 0x05
 62c:	80 93 9e 00 	sts	0x009E, r24
        usbMsgPtr = dataBuffer;         /* tell the driver which data to return */
 630:	8b e9       	ldi	r24, 0x9B	; 155
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	90 93 ae 00 	sts	0x00AE, r25
 638:	80 93 ad 00 	sts	0x00AD, r24
        return 4;
 63c:	84 e0       	ldi	r24, 0x04	; 4
 63e:	08 95       	ret
    }else if(rq->bRequest == CUSTOM_RQ_SET_STATUS){
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	49 f4       	brne	.+18     	; 0x656 <usbFunctionSetup+0x46>
        if(rq->wValue.bytes[0] & 1){    /* set LED */
 644:	82 81       	ldd	r24, Z+2	; 0x02
 646:	80 ff       	sbrs	r24, 0
 648:	03 c0       	rjmp	.+6      	; 0x650 <usbFunctionSetup+0x40>
            OCR1B = 255;
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	8b bd       	out	0x2b, r24	; 43
 64e:	01 c0       	rjmp	.+2      	; 0x652 <usbFunctionSetup+0x42>
        }else{                          /* clear LED */
            OCR1B = 0;
 650:	1b bc       	out	0x2b, r1	; 43
    }else if(rq->bRequest == CUSTOM_RQ_GET_STATUS){
        dataBuffer[0] = ((FSK_PORT & _BV(FSK)) != 0);
        usbMsgPtr = dataBuffer;         /* tell the driver which data to return */
        return 1;                       /* tell the driver to send 1 byte */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	08 95       	ret
        if(rq->wValue.bytes[0] & 1){    /* set LED */
            OCR1B = 255;
        }else{                          /* clear LED */
            OCR1B = 0;
        }
    }else if(rq->bRequest == CUSTOM_RQ_GET_STATUS){
 656:	82 30       	cpi	r24, 0x02	; 2
 658:	69 f4       	brne	.+26     	; 0x674 <usbFunctionSetup+0x64>
        dataBuffer[0] = ((FSK_PORT & _BV(FSK)) != 0);
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	c4 9b       	sbis	0x18, 4	; 24
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	80 93 9b 00 	sts	0x009B, r24
        usbMsgPtr = dataBuffer;         /* tell the driver which data to return */
 664:	8b e9       	ldi	r24, 0x9B	; 155
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	90 93 ae 00 	sts	0x00AE, r25
 66c:	80 93 ad 00 	sts	0x00AD, r24
        return 1;                       /* tell the driver to send 1 byte */
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	08 95       	ret
    }
    return 0;   /* default for not implemented requests: return no data back to host */
 674:	80 e0       	ldi	r24, 0x00	; 0
}
 676:	08 95       	ret

00000678 <usbEventResetReady>:
    }
    OSCCAL = optimumValue;
}

void usbEventResetReady(void)
{
 678:	df 92       	push	r13
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
    cli();  // usbMeasureFrameLength() counts CPU cycles, so disable interrupts.
 686:	f8 94       	cli
 688:	c8 e0       	ldi	r28, 0x08	; 8
 68a:	d0 e0       	ldi	r29, 0x00	; 0
}

static void calibrateOscillator(void)
{
uchar       step = 128;
uchar       trialValue = 0, optimumValue;
 68c:	ff 24       	eor	r15, r15
    return 0;   /* default for not implemented requests: return no data back to host */
}

static void calibrateOscillator(void)
{
uchar       step = 128;
 68e:	80 e8       	ldi	r24, 0x80	; 128
 690:	e8 2e       	mov	r14, r24
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
 692:	de 2c       	mov	r13, r14
 694:	df 0c       	add	r13, r15
 696:	d1 be       	out	0x31, r13	; 49
        x = usbMeasureFrameLength();    // proportional to current real frequency
 698:	32 de       	rcall	.-924    	; 0x2fe <usbMeasureFrameLength>
 69a:	08 2f       	mov	r16, r24
 69c:	19 2f       	mov	r17, r25
        if(x < targetValue)             // frequency still too low
 69e:	89 e0       	ldi	r24, 0x09	; 9
 6a0:	04 33       	cpi	r16, 0x34	; 52
 6a2:	18 07       	cpc	r17, r24
 6a4:	0c f4       	brge	.+2      	; 0x6a8 <usbEventResetReady+0x30>
            trialValue += step;
 6a6:	fd 2c       	mov	r15, r13
        step >>= 1;
 6a8:	e6 94       	lsr	r14
 6aa:	21 97       	sbiw	r28, 0x01	; 1
    }while(step > 0);
 6ac:	91 f7       	brne	.-28     	; 0x692 <usbEventResetReady+0x1a>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; // this is certainly far away from optimum
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 6ae:	8f 2d       	mov	r24, r15
 6b0:	81 50       	subi	r24, 0x01	; 1
 6b2:	81 bf       	out	0x31, r24	; 49
 6b4:	cf 2d       	mov	r28, r15
 6b6:	d0 e0       	ldi	r29, 0x00	; 0
 6b8:	21 96       	adiw	r28, 0x01	; 1
 6ba:	10 c0       	rjmp	.+32     	; 0x6dc <usbEventResetReady+0x64>
        x = usbMeasureFrameLength() - targetValue;
 6bc:	20 de       	rcall	.-960    	; 0x2fe <usbMeasureFrameLength>
 6be:	84 53       	subi	r24, 0x34	; 52
 6c0:	99 40       	sbci	r25, 0x09	; 9
 6c2:	97 ff       	sbrs	r25, 7
 6c4:	03 c0       	rjmp	.+6      	; 0x6cc <usbEventResetReady+0x54>
 6c6:	90 95       	com	r25
 6c8:	81 95       	neg	r24
 6ca:	9f 4f       	sbci	r25, 0xFF	; 255
        if(x < 0)
            x = -x;
        if(x < optimumDev){
 6cc:	80 17       	cp	r24, r16
 6ce:	91 07       	cpc	r25, r17
 6d0:	14 f4       	brge	.+4      	; 0x6d6 <usbEventResetReady+0x5e>
            optimumDev = x;
            optimumValue = OSCCAL;
 6d2:	f1 b6       	in	r15, 0x31	; 49
 6d4:	8c 01       	movw	r16, r24
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; // this is certainly far away from optimum
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 6d6:	81 b7       	in	r24, 0x31	; 49
 6d8:	8f 5f       	subi	r24, 0xFF	; 255
 6da:	81 bf       	out	0x31, r24	; 49
 6dc:	81 b7       	in	r24, 0x31	; 49
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	c8 17       	cp	r28, r24
 6e2:	d9 07       	cpc	r29, r25
 6e4:	5c f7       	brge	.-42     	; 0x6bc <usbEventResetReady+0x44>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
 6e6:	f1 be       	out	0x31, r15	; 49

void usbEventResetReady(void)
{
    cli();  // usbMeasureFrameLength() counts CPU cycles, so disable interrupts.
    calibrateOscillator();
    sei();
 6e8:	78 94       	sei
    eeprom_write_byte(0, OSCCAL);   // store the calibrated value in EEPROM
 6ea:	61 b7       	in	r22, 0x31	; 49
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	64 d3       	rcall	.+1736   	; 0xdba <__eewr_byte_tn85>
}
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	ff 90       	pop	r15
 6fc:	ef 90       	pop	r14
 6fe:	df 90       	pop	r13
 700:	08 95       	ret

00000702 <set_wpm>:
{
	// This is WPM * 100 due to need for fractional WPM for slow modes
	//
	// Dit length in milliseconds is 1200 ms / WPM
	// Divide by 2 ms to get number of timer ticks
	dit_length = (120000 / new_wpm) / 2;
 702:	9c 01       	movw	r18, r24
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	60 e6       	ldi	r22, 0x60	; 96
 70a:	7a ee       	ldi	r23, 0xEA	; 234
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	d5 d1       	rcall	.+938    	; 0xabc <__divmodsi4>
 712:	30 93 cf 00 	sts	0x00CF, r19
 716:	20 93 ce 00 	sts	0x00CE, r18
}
 71a:	08 95       	ret

0000071c <main>:

int main(void)
{
 71c:	af 92       	push	r10
 71e:	bf 92       	push	r11
 720:	cf 92       	push	r12
 722:	df 92       	push	r13
 724:	ef 92       	push	r14
 726:	ff 92       	push	r15
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
	//-------------------------------------------------------------------------------------------
	// VUSB init
	//-------------------------------------------------------------------------------------------

	// Load the osc calibration value
	calibrationValue = eeprom_read_byte(0); /* calibration value from last time */
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	3a d3       	rcall	.+1652   	; 0xdaa <__eerd_byte_tn85>
	if(calibrationValue != 0xff){
 736:	8f 3f       	cpi	r24, 0xFF	; 255
 738:	09 f0       	breq	.+2      	; 0x73c <main+0x20>
		OSCCAL = calibrationValue;
 73a:	81 bf       	out	0x31, r24	; 49
	}

	wdt_enable(WDTO_1S);
 73c:	2e e0       	ldi	r18, 0x0E	; 14
 73e:	88 e1       	ldi	r24, 0x18	; 24
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	f8 94       	cli
 746:	a8 95       	wdr
 748:	81 bd       	out	0x21, r24	; 33
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	21 bd       	out	0x21, r18	; 33
	/* RESET status: all port bits are inputs without pull-up.
	 * That's the way we need D+ and D-. Therefore we don't need any
	 * additional hardware initialization.
	 */
	odDebugInit();
	usbInit();
 74e:	b7 dd       	rcall	.-1170   	; 0x2be <usbInit>
	usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 750:	b8 9a       	sbi	0x17, 0	; 23
	i = 0;
 752:	80 e0       	ldi	r24, 0x00	; 0
	while(--i){             /* fake USB disconnect for > 250 ms */
 754:	07 c0       	rjmp	.+14     	; 0x764 <main+0x48>
		wdt_reset();
 756:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 758:	ac e1       	ldi	r26, 0x1C	; 28
 75a:	b0 e1       	ldi	r27, 0x10	; 16
 75c:	11 97       	sbiw	r26, 0x01	; 1
 75e:	f1 f7       	brne	.-4      	; 0x75c <main+0x40>
 760:	00 c0       	rjmp	.+0      	; 0x762 <main+0x46>
 762:	00 00       	nop
	 */
	odDebugInit();
	usbInit();
	usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
	i = 0;
	while(--i){             /* fake USB disconnect for > 250 ms */
 764:	81 50       	subi	r24, 0x01	; 1
 766:	b9 f7       	brne	.-18     	; 0x756 <main+0x3a>
		wdt_reset();
		_delay_ms(1);
	}
	usbDeviceConnect();
 768:	b8 98       	cbi	0x17, 0	; 23
	sei();
 76a:	78 94       	sei
	//-------------------------------------------------------------------------------------------

	// Set up Timer0 for event timer
	// 16.5 MHz clock, /256 prescale, 129 count = 2.0014 ms
	// We'll consider it 2 ms for our purposes
	TCCR0A = _BV(WGM01); // CTC mode
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = _BV(CS02); // Prescale /256
 770:	84 e0       	ldi	r24, 0x04	; 4
 772:	83 bf       	out	0x33, r24	; 51
	OCR0A = 128;
 774:	80 e8       	ldi	r24, 0x80	; 128
 776:	89 bd       	out	0x29, r24	; 41
	TIMSK |= _BV(OCIE0A); // Enable CTC interrupt
 778:	89 b7       	in	r24, 0x39	; 57
 77a:	80 61       	ori	r24, 0x10	; 16
 77c:	89 bf       	out	0x39, r24	; 57

	// Set up Timer1 for fast PWM (500 kHz)
	TCCR1 = _BV(CS10);
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	80 bf       	out	0x30, r24	; 48
	GTCCR = _BV(PWM1B) | _BV(COM1B1);
 782:	80 e6       	ldi	r24, 0x60	; 96
 784:	8c bd       	out	0x2c, r24	; 44
	OCR1B = 0; // Initial PWM value
 786:	1b bc       	out	0x2b, r1	; 43
	OCR1C = 255;
 788:	8f ef       	ldi	r24, 0xFF	; 255
 78a:	8d bd       	out	0x2d, r24	; 45
	PLLCSR = _BV(PLLE) | _BV(PCKE);
 78c:	96 e0       	ldi	r25, 0x06	; 6
 78e:	97 bd       	out	0x27, r25	; 39

	// Initialize ports
	DDRB = _BV(FSK) | _BV(KEY);
 790:	98 e1       	ldi	r25, 0x18	; 24
 792:	97 bb       	out	0x17, r25	; 23
	FSK_PORT &= ~(_BV(FSK));
 794:	c4 98       	cbi	0x18, 4	; 24

	OCR1B = 255;
 796:	8b bd       	out	0x2b, r24	; 43

	// Set up the message buffer
	msg_buffer = malloc(MSG_BUFFER_SIZE);
 798:	81 e5       	ldi	r24, 0x51	; 81
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	cc d1       	rcall	.+920    	; 0xb36 <malloc>
 79e:	80 93 90 00 	sts	0x0090, r24
 7a2:	90 93 91 00 	sts	0x0091, r25
	memset(msg_buffer, '\0', MSG_BUFFER_SIZE);
 7a6:	21 e5       	ldi	r18, 0x51	; 81
 7a8:	dc 01       	movw	r26, r24
 7aa:	1d 92       	st	X+, r1
 7ac:	2a 95       	dec	r18
 7ae:	e9 f7       	brne	.-6      	; 0x7aa <main+0x8e>
	cur_msg_p = msg_buffer;
 7b0:	80 93 8e 00 	sts	0x008E, r24
 7b4:	90 93 8f 00 	sts	0x008F, r25

	// Initialize states
	cur_mode = MODE_CW13;
 7b8:	27 e0       	ldi	r18, 0x07	; 7
 7ba:	20 93 d0 00 	sts	0x00D0, r18
	cur_state = STATE_IDLE;
 7be:	10 92 d3 00 	sts	0x00D3, r1
{
	// This is WPM * 100 due to need for fractional WPM for slow modes
	//
	// Dit length in milliseconds is 1200 ms / WPM
	// Divide by 2 ms to get number of timer ticks
	dit_length = (120000 / new_wpm) / 2;
 7c2:	2e e2       	ldi	r18, 0x2E	; 46
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	30 93 cf 00 	sts	0x00CF, r19
 7ca:	20 93 ce 00 	sts	0x00CE, r18

	// Initialize states
	cur_mode = MODE_CW13;
	cur_state = STATE_IDLE;
	set_wpm(dit_speed[cur_mode]);
	strcpy(msg_buffer, "VVV DE NT7S/B CN85");
 7ce:	62 e6       	ldi	r22, 0x62	; 98
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	e4 d2       	rcall	.+1480   	; 0xd9c <strcpy>
					default:
						break;
					}

					cur_state_end = cur_timer + dit_length;
					cur_state = STATE_DITDELAY;
 7d4:	43 e0       	ldi	r20, 0x03	; 3
 7d6:	c4 2e       	mov	r12, r20
				case MODE_DFCW10:
					// Transmitter on
					KEY_PORT &= ~(_BV(KEY));

					// Set FSK to 255 (minimum capacitance/maximum freq)
					OCR1B = 255;
 7d8:	dd 24       	eor	r13, r13
 7da:	da 94       	dec	r13
					cur_msg_p = msg_buffer;
					cur_character = '\0';

					// Put a word delay at the end of message
					cur_state_end = cur_timer + (dit_length * MULT_WORDDELAY);
					cur_state = STATE_WORDDELAY;
 7dc:	35 e0       	ldi	r19, 0x05	; 5
 7de:	f3 2e       	mov	r15, r19
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
						{
							cur_state_end = cur_timer + (dit_length * MULT_DAH);
							cur_state = STATE_DAHDELAY;
 7e0:	24 e0       	ldi	r18, 0x04	; 4
 7e2:	e2 2e       	mov	r14, r18
							cur_state = STATE_DAH;
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
							cur_state = STATE_DIT;
 7e4:	bb 24       	eor	r11, r11
 7e6:	b3 94       	inc	r11
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
						{
							cur_state_end = cur_timer + (dit_length * MULT_DAH);
							cur_state = STATE_DAH;
 7e8:	92 e0       	ldi	r25, 0x02	; 2
 7ea:	a9 2e       	mov	r10, r25
		//_delay_ms(25);
		DBG1(0x02, 0, 0);   /* debug output: main loop iterates */

		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
 7ec:	f8 94       	cli
		cur_timer = timer;
 7ee:	80 91 ca 00 	lds	r24, 0x00CA
 7f2:	90 91 cb 00 	lds	r25, 0x00CB
 7f6:	a0 91 cc 00 	lds	r26, 0x00CC
 7fa:	b0 91 cd 00 	lds	r27, 0x00CD
 7fe:	80 93 97 00 	sts	0x0097, r24
 802:	90 93 98 00 	sts	0x0098, r25
 806:	a0 93 99 00 	sts	0x0099, r26
 80a:	b0 93 9a 00 	sts	0x009A, r27
		sei();
 80e:	78 94       	sei



		switch(cur_mode)
 810:	90 91 d0 00 	lds	r25, 0x00D0
 814:	98 30       	cpi	r25, 0x08	; 8
 816:	08 f0       	brcs	.+2      	; 0x81a <main+0xfe>
 818:	3c c1       	rjmp	.+632    	; 0xa92 <main+0x376>
		case MODE_QRSS3:
		case MODE_QRSS6:
		case MODE_QRSS10:
		case MODE_CW5:
		case MODE_CW13:
			switch(cur_state)
 81a:	80 91 d3 00 	lds	r24, 0x00D3
 81e:	83 30       	cpi	r24, 0x03	; 3
 820:	20 f4       	brcc	.+8      	; 0x82a <main+0x10e>
 822:	81 30       	cpi	r24, 0x01	; 1
 824:	08 f0       	brcs	.+2      	; 0x828 <main+0x10c>
 826:	e0 c0       	rjmp	.+448    	; 0x9e8 <main+0x2cc>
 828:	04 c0       	rjmp	.+8      	; 0x832 <main+0x116>
 82a:	86 30       	cpi	r24, 0x06	; 6
 82c:	08 f0       	brcs	.+2      	; 0x830 <main+0x114>
 82e:	31 c1       	rjmp	.+610    	; 0xa92 <main+0x376>
 830:	18 c1       	rjmp	.+560    	; 0xa62 <main+0x346>
			{
			case STATE_IDLE:
				// We should only be in IDLE to figure out what to do next

				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_msg_p == msg_buffer) && (cur_character == '\0'))
 832:	e0 91 8e 00 	lds	r30, 0x008E
 836:	f0 91 8f 00 	lds	r31, 0x008F
 83a:	80 91 90 00 	lds	r24, 0x0090
 83e:	90 91 91 00 	lds	r25, 0x0091
 842:	e8 17       	cp	r30, r24
 844:	f9 07       	cpc	r31, r25
 846:	59 f4       	brne	.+22     	; 0x85e <main+0x142>
 848:	80 91 92 00 	lds	r24, 0x0092
 84c:	88 23       	and	r24, r24
 84e:	39 f4       	brne	.+14     	; 0x85e <main+0x142>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_msg_p) - MORSE_CHAR_START]);
 850:	e0 81       	ld	r30, Z
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	e6 5b       	subi	r30, 0xB6	; 182
 856:	ff 4f       	sbci	r31, 0xFF	; 255
 858:	e4 91       	lpm	r30, Z+
 85a:	e0 93 92 00 	sts	0x0092, r30
				}

				// Get the current element in the current character
				if(cur_character != '\0')
 85e:	40 91 92 00 	lds	r20, 0x0092
 862:	44 23       	and	r20, r20
 864:	09 f4       	brne	.+2      	; 0x868 <main+0x14c>
 866:	92 c0       	rjmp	.+292    	; 0x98c <main+0x270>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
 868:	40 38       	cpi	r20, 0x80	; 128
 86a:	21 f0       	breq	.+8      	; 0x874 <main+0x158>
 86c:	4f 3f       	cpi	r20, 0xFF	; 255
 86e:	09 f0       	breq	.+2      	; 0x872 <main+0x156>
 870:	57 c0       	rjmp	.+174    	; 0x920 <main+0x204>
 872:	20 c0       	rjmp	.+64     	; 0x8b4 <main+0x198>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
						{
							cur_state_end = cur_timer + (dit_length * MULT_DAH);
 874:	80 91 ce 00 	lds	r24, 0x00CE
 878:	90 91 cf 00 	lds	r25, 0x00CF
 87c:	63 e0       	ldi	r22, 0x03	; 3
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	0b d1       	rcall	.+534    	; 0xa98 <__mulhi3>
 882:	a0 e0       	ldi	r26, 0x00	; 0
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	20 91 97 00 	lds	r18, 0x0097
 88a:	30 91 98 00 	lds	r19, 0x0098
 88e:	40 91 99 00 	lds	r20, 0x0099
 892:	50 91 9a 00 	lds	r21, 0x009A
 896:	82 0f       	add	r24, r18
 898:	93 1f       	adc	r25, r19
 89a:	a4 1f       	adc	r26, r20
 89c:	b5 1f       	adc	r27, r21
 89e:	80 93 93 00 	sts	0x0093, r24
 8a2:	90 93 94 00 	sts	0x0094, r25
 8a6:	a0 93 95 00 	sts	0x0095, r26
 8aa:	b0 93 96 00 	sts	0x0096, r27
							cur_state = STATE_DAHDELAY;
 8ae:	e0 92 d3 00 	sts	0x00D3, r14
 8b2:	1f c0       	rjmp	.+62     	; 0x8f2 <main+0x1d6>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * MULT_WORDDELAY);
 8b4:	80 91 ce 00 	lds	r24, 0x00CE
 8b8:	90 91 cf 00 	lds	r25, 0x00CF
 8bc:	67 e0       	ldi	r22, 0x07	; 7
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	eb d0       	rcall	.+470    	; 0xa98 <__mulhi3>
 8c2:	a0 e0       	ldi	r26, 0x00	; 0
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	20 91 97 00 	lds	r18, 0x0097
 8ca:	30 91 98 00 	lds	r19, 0x0098
 8ce:	40 91 99 00 	lds	r20, 0x0099
 8d2:	50 91 9a 00 	lds	r21, 0x009A
 8d6:	82 0f       	add	r24, r18
 8d8:	93 1f       	adc	r25, r19
 8da:	a4 1f       	adc	r26, r20
 8dc:	b5 1f       	adc	r27, r21
 8de:	80 93 93 00 	sts	0x0093, r24
 8e2:	90 93 94 00 	sts	0x0094, r25
 8e6:	a0 93 95 00 	sts	0x0095, r26
 8ea:	b0 93 96 00 	sts	0x0096, r27
							cur_state = STATE_WORDDELAY;
 8ee:	f0 92 d3 00 	sts	0x00D3, r15
						}

						// Grab next character, set state to inter-character delay
						cur_msg_p++;
 8f2:	e0 91 8e 00 	lds	r30, 0x008E
 8f6:	f0 91 8f 00 	lds	r31, 0x008F
 8fa:	cf 01       	movw	r24, r30
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	90 93 8f 00 	sts	0x008F, r25
 902:	80 93 8e 00 	sts	0x008E, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_msg_p) == '\0')
 906:	e1 81       	ldd	r30, Z+1	; 0x01
 908:	ee 23       	and	r30, r30
 90a:	19 f4       	brne	.+6      	; 0x912 <main+0x1f6>
							cur_character = '\0';
 90c:	10 92 92 00 	sts	0x0092, r1
 910:	c0 c0       	rjmp	.+384    	; 0xa92 <main+0x376>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_msg_p) - MORSE_CHAR_START]);
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	e6 5b       	subi	r30, 0xB6	; 182
 916:	ff 4f       	sbci	r31, 0xFF	; 255
 918:	e4 91       	lpm	r30, Z+
 91a:	e0 93 92 00 	sts	0x0092, r30
 91e:	b9 c0       	rjmp	.+370    	; 0xa92 <main+0x376>
 920:	80 91 ce 00 	lds	r24, 0x00CE
 924:	90 91 cf 00 	lds	r25, 0x00CF
 928:	00 91 97 00 	lds	r16, 0x0097
 92c:	10 91 98 00 	lds	r17, 0x0098
 930:	20 91 99 00 	lds	r18, 0x0099
 934:	30 91 9a 00 	lds	r19, 0x009A
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
 938:	47 ff       	sbrs	r20, 7
 93a:	14 c0       	rjmp	.+40     	; 0x964 <main+0x248>
						{
							cur_state_end = cur_timer + (dit_length * MULT_DAH);
 93c:	63 e0       	ldi	r22, 0x03	; 3
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	ab d0       	rcall	.+342    	; 0xa98 <__mulhi3>
 942:	a0 e0       	ldi	r26, 0x00	; 0
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	80 0f       	add	r24, r16
 948:	91 1f       	adc	r25, r17
 94a:	a2 1f       	adc	r26, r18
 94c:	b3 1f       	adc	r27, r19
 94e:	80 93 93 00 	sts	0x0093, r24
 952:	90 93 94 00 	sts	0x0094, r25
 956:	a0 93 95 00 	sts	0x0095, r26
 95a:	b0 93 96 00 	sts	0x0096, r27
							cur_state = STATE_DAH;
 95e:	a0 92 d3 00 	sts	0x00D3, r10
 962:	10 c0       	rjmp	.+32     	; 0x984 <main+0x268>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
 964:	a0 e0       	ldi	r26, 0x00	; 0
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	80 0f       	add	r24, r16
 96a:	91 1f       	adc	r25, r17
 96c:	a2 1f       	adc	r26, r18
 96e:	b3 1f       	adc	r27, r19
 970:	80 93 93 00 	sts	0x0093, r24
 974:	90 93 94 00 	sts	0x0094, r25
 978:	a0 93 95 00 	sts	0x0095, r26
 97c:	b0 93 96 00 	sts	0x0096, r27
							cur_state = STATE_DIT;
 980:	b0 92 d3 00 	sts	0x00D3, r11
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
 984:	44 0f       	add	r20, r20
 986:	40 93 92 00 	sts	0x0092, r20
 98a:	83 c0       	rjmp	.+262    	; 0xa92 <main+0x376>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(msg_buffer, "VVV DE NT7S/B CN85");
 98c:	c0 91 90 00 	lds	r28, 0x0090
 990:	d0 91 91 00 	lds	r29, 0x0091
 994:	ce 01       	movw	r24, r28
 996:	62 e6       	ldi	r22, 0x62	; 98
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	00 d2       	rcall	.+1024   	; 0xd9c <strcpy>
					cur_msg_p = msg_buffer;
 99c:	d0 93 8f 00 	sts	0x008F, r29
 9a0:	c0 93 8e 00 	sts	0x008E, r28
					cur_character = '\0';
 9a4:	10 92 92 00 	sts	0x0092, r1

					// Put a word delay at the end of message
					cur_state_end = cur_timer + (dit_length * MULT_WORDDELAY);
 9a8:	80 91 ce 00 	lds	r24, 0x00CE
 9ac:	90 91 cf 00 	lds	r25, 0x00CF
 9b0:	67 e0       	ldi	r22, 0x07	; 7
 9b2:	70 e0       	ldi	r23, 0x00	; 0
 9b4:	71 d0       	rcall	.+226    	; 0xa98 <__mulhi3>
 9b6:	a0 e0       	ldi	r26, 0x00	; 0
 9b8:	b0 e0       	ldi	r27, 0x00	; 0
 9ba:	20 91 97 00 	lds	r18, 0x0097
 9be:	30 91 98 00 	lds	r19, 0x0098
 9c2:	40 91 99 00 	lds	r20, 0x0099
 9c6:	50 91 9a 00 	lds	r21, 0x009A
 9ca:	82 0f       	add	r24, r18
 9cc:	93 1f       	adc	r25, r19
 9ce:	a4 1f       	adc	r26, r20
 9d0:	b5 1f       	adc	r27, r21
 9d2:	80 93 93 00 	sts	0x0093, r24
 9d6:	90 93 94 00 	sts	0x0094, r25
 9da:	a0 93 95 00 	sts	0x0095, r26
 9de:	b0 93 96 00 	sts	0x0096, r27
					cur_state = STATE_WORDDELAY;
 9e2:	f0 92 d3 00 	sts	0x00D3, r15
 9e6:	55 c0       	rjmp	.+170    	; 0xa92 <main+0x376>
				}

				break;
			case STATE_DIT:
			case STATE_DAH:
				switch(cur_mode)
 9e8:	93 50       	subi	r25, 0x03	; 3
 9ea:	95 30       	cpi	r25, 0x05	; 5
 9ec:	18 f0       	brcs	.+6      	; 0x9f4 <main+0x2d8>
				{
				case MODE_DFCW3:
				case MODE_DFCW6:
				case MODE_DFCW10:
					// Transmitter on
					KEY_PORT &= ~(_BV(KEY));
 9ee:	c3 98       	cbi	0x18, 3	; 24

					// Set FSK to 255 (minimum capacitance/maximum freq)
					OCR1B = 255;
 9f0:	db bc       	out	0x2b, r13	; 43
					break;
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <main+0x2dc>
				case MODE_QRSS6:
				case MODE_QRSS10:
				case MODE_CW5:
				case MODE_CW13:
					// Transmitter on
					KEY_PORT &= ~(_BV(KEY));
 9f4:	c3 98       	cbi	0x18, 3	; 24

					// Set FSK to 0 (maximum capacitance/minimum freq)
					OCR1B = 0;
 9f6:	1b bc       	out	0x2b, r1	; 43
					break;
				default:
					break;
				}

				if(cur_timer > cur_state_end)
 9f8:	20 91 97 00 	lds	r18, 0x0097
 9fc:	30 91 98 00 	lds	r19, 0x0098
 a00:	40 91 99 00 	lds	r20, 0x0099
 a04:	50 91 9a 00 	lds	r21, 0x009A
 a08:	80 91 93 00 	lds	r24, 0x0093
 a0c:	90 91 94 00 	lds	r25, 0x0094
 a10:	a0 91 95 00 	lds	r26, 0x0095
 a14:	b0 91 96 00 	lds	r27, 0x0096
 a18:	82 17       	cp	r24, r18
 a1a:	93 07       	cpc	r25, r19
 a1c:	a4 07       	cpc	r26, r20
 a1e:	b5 07       	cpc	r27, r21
 a20:	c0 f5       	brcc	.+112    	; 0xa92 <main+0x376>
				{
					switch(cur_mode)
 a22:	80 91 d0 00 	lds	r24, 0x00D0
 a26:	83 30       	cpi	r24, 0x03	; 3
 a28:	18 f0       	brcs	.+6      	; 0xa30 <main+0x314>
 a2a:	88 30       	cpi	r24, 0x08	; 8
 a2c:	28 f4       	brcc	.+10     	; 0xa38 <main+0x31c>
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <main+0x318>
					{
					case MODE_DFCW3:
					case MODE_DFCW6:
					case MODE_DFCW10:
						// Transmitter on
						KEY_PORT &= ~(_BV(KEY));
 a30:	c3 98       	cbi	0x18, 3	; 24
 a32:	01 c0       	rjmp	.+2      	; 0xa36 <main+0x31a>
					case MODE_QRSS6:
					case MODE_QRSS10:
					case MODE_CW5:
					case MODE_CW13:
						// Transmitter off
						KEY_PORT |= _BV(KEY);
 a34:	c3 9a       	sbi	0x18, 3	; 24

						// Set FSK to 0 (maximum capacitance/minimum freq)
						OCR1B = 0;
 a36:	1b bc       	out	0x2b, r1	; 43
						break;
					default:
						break;
					}

					cur_state_end = cur_timer + dit_length;
 a38:	80 91 ce 00 	lds	r24, 0x00CE
 a3c:	90 91 cf 00 	lds	r25, 0x00CF
 a40:	a0 e0       	ldi	r26, 0x00	; 0
 a42:	b0 e0       	ldi	r27, 0x00	; 0
 a44:	82 0f       	add	r24, r18
 a46:	93 1f       	adc	r25, r19
 a48:	a4 1f       	adc	r26, r20
 a4a:	b5 1f       	adc	r27, r21
 a4c:	80 93 93 00 	sts	0x0093, r24
 a50:	90 93 94 00 	sts	0x0094, r25
 a54:	a0 93 95 00 	sts	0x0095, r26
 a58:	b0 93 96 00 	sts	0x0096, r27
					cur_state = STATE_DITDELAY;
 a5c:	c0 92 d3 00 	sts	0x00D3, r12
 a60:	18 c0       	rjmp	.+48     	; 0xa92 <main+0x376>
				}
				break;
			case STATE_DITDELAY:
			case STATE_DAHDELAY:
			case STATE_WORDDELAY:
				OCR1B = 0;
 a62:	1b bc       	out	0x2b, r1	; 43
				if(cur_timer > cur_state_end)
 a64:	20 91 97 00 	lds	r18, 0x0097
 a68:	30 91 98 00 	lds	r19, 0x0098
 a6c:	40 91 99 00 	lds	r20, 0x0099
 a70:	50 91 9a 00 	lds	r21, 0x009A
 a74:	80 91 93 00 	lds	r24, 0x0093
 a78:	90 91 94 00 	lds	r25, 0x0094
 a7c:	a0 91 95 00 	lds	r26, 0x0095
 a80:	b0 91 96 00 	lds	r27, 0x0096
 a84:	82 17       	cp	r24, r18
 a86:	93 07       	cpc	r25, r19
 a88:	a4 07       	cpc	r26, r20
 a8a:	b5 07       	cpc	r27, r21
 a8c:	10 f4       	brcc	.+4      	; 0xa92 <main+0x376>
				{
					cur_state = STATE_IDLE;
 a8e:	10 92 d3 00 	sts	0x00D3, r1
			break;
		}


		// Housekeeping and handle USB
		wdt_reset();
 a92:	a8 95       	wdr
		usbPoll();
 a94:	24 db       	rcall	.-2488   	; 0xde <usbPoll>
	}
 a96:	aa ce       	rjmp	.-684    	; 0x7ec <main+0xd0>

00000a98 <__mulhi3>:
 a98:	55 27       	eor	r21, r21
 a9a:	00 24       	eor	r0, r0

00000a9c <__mulhi3_loop>:
 a9c:	80 ff       	sbrs	r24, 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <__mulhi3_skip1>
 aa0:	06 0e       	add	r0, r22
 aa2:	57 1f       	adc	r21, r23

00000aa4 <__mulhi3_skip1>:
 aa4:	66 0f       	add	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	61 15       	cp	r22, r1
 aaa:	71 05       	cpc	r23, r1
 aac:	21 f0       	breq	.+8      	; 0xab6 <__mulhi3_exit>
 aae:	96 95       	lsr	r25
 ab0:	87 95       	ror	r24
 ab2:	00 97       	sbiw	r24, 0x00	; 0
 ab4:	99 f7       	brne	.-26     	; 0xa9c <__mulhi3_loop>

00000ab6 <__mulhi3_exit>:
 ab6:	95 2f       	mov	r25, r21
 ab8:	80 2d       	mov	r24, r0
 aba:	08 95       	ret

00000abc <__divmodsi4>:
 abc:	97 fb       	bst	r25, 7
 abe:	09 2e       	mov	r0, r25
 ac0:	05 26       	eor	r0, r21
 ac2:	0e d0       	rcall	.+28     	; 0xae0 <__divmodsi4_neg1>
 ac4:	57 fd       	sbrc	r21, 7
 ac6:	04 d0       	rcall	.+8      	; 0xad0 <__divmodsi4_neg2>
 ac8:	14 d0       	rcall	.+40     	; 0xaf2 <__udivmodsi4>
 aca:	0a d0       	rcall	.+20     	; 0xae0 <__divmodsi4_neg1>
 acc:	00 1c       	adc	r0, r0
 ace:	38 f4       	brcc	.+14     	; 0xade <__divmodsi4_exit>

00000ad0 <__divmodsi4_neg2>:
 ad0:	50 95       	com	r21
 ad2:	40 95       	com	r20
 ad4:	30 95       	com	r19
 ad6:	21 95       	neg	r18
 ad8:	3f 4f       	sbci	r19, 0xFF	; 255
 ada:	4f 4f       	sbci	r20, 0xFF	; 255
 adc:	5f 4f       	sbci	r21, 0xFF	; 255

00000ade <__divmodsi4_exit>:
 ade:	08 95       	ret

00000ae0 <__divmodsi4_neg1>:
 ae0:	f6 f7       	brtc	.-4      	; 0xade <__divmodsi4_exit>
 ae2:	90 95       	com	r25
 ae4:	80 95       	com	r24
 ae6:	70 95       	com	r23
 ae8:	61 95       	neg	r22
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	08 95       	ret

00000af2 <__udivmodsi4>:
 af2:	a1 e2       	ldi	r26, 0x21	; 33
 af4:	1a 2e       	mov	r1, r26
 af6:	aa 1b       	sub	r26, r26
 af8:	bb 1b       	sub	r27, r27
 afa:	fd 01       	movw	r30, r26
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <__udivmodsi4_ep>

00000afe <__udivmodsi4_loop>:
 afe:	aa 1f       	adc	r26, r26
 b00:	bb 1f       	adc	r27, r27
 b02:	ee 1f       	adc	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	a2 17       	cp	r26, r18
 b08:	b3 07       	cpc	r27, r19
 b0a:	e4 07       	cpc	r30, r20
 b0c:	f5 07       	cpc	r31, r21
 b0e:	20 f0       	brcs	.+8      	; 0xb18 <__udivmodsi4_ep>
 b10:	a2 1b       	sub	r26, r18
 b12:	b3 0b       	sbc	r27, r19
 b14:	e4 0b       	sbc	r30, r20
 b16:	f5 0b       	sbc	r31, r21

00000b18 <__udivmodsi4_ep>:
 b18:	66 1f       	adc	r22, r22
 b1a:	77 1f       	adc	r23, r23
 b1c:	88 1f       	adc	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	1a 94       	dec	r1
 b22:	69 f7       	brne	.-38     	; 0xafe <__udivmodsi4_loop>
 b24:	60 95       	com	r22
 b26:	70 95       	com	r23
 b28:	80 95       	com	r24
 b2a:	90 95       	com	r25
 b2c:	9b 01       	movw	r18, r22
 b2e:	ac 01       	movw	r20, r24
 b30:	bd 01       	movw	r22, r26
 b32:	cf 01       	movw	r24, r30
 b34:	08 95       	ret

00000b36 <malloc>:
 b36:	cf 93       	push	r28
 b38:	df 93       	push	r29
 b3a:	82 30       	cpi	r24, 0x02	; 2
 b3c:	91 05       	cpc	r25, r1
 b3e:	10 f4       	brcc	.+4      	; 0xb44 <malloc+0xe>
 b40:	82 e0       	ldi	r24, 0x02	; 2
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	e0 91 d6 00 	lds	r30, 0x00D6
 b48:	f0 91 d7 00 	lds	r31, 0x00D7
 b4c:	40 e0       	ldi	r20, 0x00	; 0
 b4e:	50 e0       	ldi	r21, 0x00	; 0
 b50:	20 e0       	ldi	r18, 0x00	; 0
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	26 c0       	rjmp	.+76     	; 0xba2 <malloc+0x6c>
 b56:	60 81       	ld	r22, Z
 b58:	71 81       	ldd	r23, Z+1	; 0x01
 b5a:	68 17       	cp	r22, r24
 b5c:	79 07       	cpc	r23, r25
 b5e:	e0 f0       	brcs	.+56     	; 0xb98 <malloc+0x62>
 b60:	68 17       	cp	r22, r24
 b62:	79 07       	cpc	r23, r25
 b64:	81 f4       	brne	.+32     	; 0xb86 <malloc+0x50>
 b66:	82 81       	ldd	r24, Z+2	; 0x02
 b68:	93 81       	ldd	r25, Z+3	; 0x03
 b6a:	21 15       	cp	r18, r1
 b6c:	31 05       	cpc	r19, r1
 b6e:	31 f0       	breq	.+12     	; 0xb7c <malloc+0x46>
 b70:	d9 01       	movw	r26, r18
 b72:	13 96       	adiw	r26, 0x03	; 3
 b74:	9c 93       	st	X, r25
 b76:	8e 93       	st	-X, r24
 b78:	12 97       	sbiw	r26, 0x02	; 2
 b7a:	2b c0       	rjmp	.+86     	; 0xbd2 <malloc+0x9c>
 b7c:	90 93 d7 00 	sts	0x00D7, r25
 b80:	80 93 d6 00 	sts	0x00D6, r24
 b84:	26 c0       	rjmp	.+76     	; 0xbd2 <malloc+0x9c>
 b86:	41 15       	cp	r20, r1
 b88:	51 05       	cpc	r21, r1
 b8a:	19 f0       	breq	.+6      	; 0xb92 <malloc+0x5c>
 b8c:	64 17       	cp	r22, r20
 b8e:	75 07       	cpc	r23, r21
 b90:	18 f4       	brcc	.+6      	; 0xb98 <malloc+0x62>
 b92:	ab 01       	movw	r20, r22
 b94:	e9 01       	movw	r28, r18
 b96:	df 01       	movw	r26, r30
 b98:	9f 01       	movw	r18, r30
 b9a:	72 81       	ldd	r23, Z+2	; 0x02
 b9c:	63 81       	ldd	r22, Z+3	; 0x03
 b9e:	e7 2f       	mov	r30, r23
 ba0:	f6 2f       	mov	r31, r22
 ba2:	30 97       	sbiw	r30, 0x00	; 0
 ba4:	c1 f6       	brne	.-80     	; 0xb56 <malloc+0x20>
 ba6:	41 15       	cp	r20, r1
 ba8:	51 05       	cpc	r21, r1
 baa:	01 f1       	breq	.+64     	; 0xbec <malloc+0xb6>
 bac:	48 1b       	sub	r20, r24
 bae:	59 0b       	sbc	r21, r25
 bb0:	44 30       	cpi	r20, 0x04	; 4
 bb2:	51 05       	cpc	r21, r1
 bb4:	80 f4       	brcc	.+32     	; 0xbd6 <malloc+0xa0>
 bb6:	12 96       	adiw	r26, 0x02	; 2
 bb8:	8d 91       	ld	r24, X+
 bba:	9c 91       	ld	r25, X
 bbc:	13 97       	sbiw	r26, 0x03	; 3
 bbe:	20 97       	sbiw	r28, 0x00	; 0
 bc0:	19 f0       	breq	.+6      	; 0xbc8 <malloc+0x92>
 bc2:	9b 83       	std	Y+3, r25	; 0x03
 bc4:	8a 83       	std	Y+2, r24	; 0x02
 bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <malloc+0x9a>
 bc8:	90 93 d7 00 	sts	0x00D7, r25
 bcc:	80 93 d6 00 	sts	0x00D6, r24
 bd0:	fd 01       	movw	r30, r26
 bd2:	32 96       	adiw	r30, 0x02	; 2
 bd4:	46 c0       	rjmp	.+140    	; 0xc62 <malloc+0x12c>
 bd6:	fd 01       	movw	r30, r26
 bd8:	e4 0f       	add	r30, r20
 bda:	f5 1f       	adc	r31, r21
 bdc:	81 93       	st	Z+, r24
 bde:	91 93       	st	Z+, r25
 be0:	42 50       	subi	r20, 0x02	; 2
 be2:	50 40       	sbci	r21, 0x00	; 0
 be4:	11 96       	adiw	r26, 0x01	; 1
 be6:	5c 93       	st	X, r21
 be8:	4e 93       	st	-X, r20
 bea:	3b c0       	rjmp	.+118    	; 0xc62 <malloc+0x12c>
 bec:	20 91 d4 00 	lds	r18, 0x00D4
 bf0:	30 91 d5 00 	lds	r19, 0x00D5
 bf4:	21 15       	cp	r18, r1
 bf6:	31 05       	cpc	r19, r1
 bf8:	41 f4       	brne	.+16     	; 0xc0a <malloc+0xd4>
 bfa:	20 91 87 00 	lds	r18, 0x0087
 bfe:	30 91 88 00 	lds	r19, 0x0088
 c02:	30 93 d5 00 	sts	0x00D5, r19
 c06:	20 93 d4 00 	sts	0x00D4, r18
 c0a:	20 91 89 00 	lds	r18, 0x0089
 c0e:	30 91 8a 00 	lds	r19, 0x008A
 c12:	21 15       	cp	r18, r1
 c14:	31 05       	cpc	r19, r1
 c16:	41 f4       	brne	.+16     	; 0xc28 <malloc+0xf2>
 c18:	2d b7       	in	r18, 0x3d	; 61
 c1a:	3e b7       	in	r19, 0x3e	; 62
 c1c:	40 91 85 00 	lds	r20, 0x0085
 c20:	50 91 86 00 	lds	r21, 0x0086
 c24:	24 1b       	sub	r18, r20
 c26:	35 0b       	sbc	r19, r21
 c28:	e0 91 d4 00 	lds	r30, 0x00D4
 c2c:	f0 91 d5 00 	lds	r31, 0x00D5
 c30:	e2 17       	cp	r30, r18
 c32:	f3 07       	cpc	r31, r19
 c34:	a0 f4       	brcc	.+40     	; 0xc5e <malloc+0x128>
 c36:	2e 1b       	sub	r18, r30
 c38:	3f 0b       	sbc	r19, r31
 c3a:	28 17       	cp	r18, r24
 c3c:	39 07       	cpc	r19, r25
 c3e:	78 f0       	brcs	.+30     	; 0xc5e <malloc+0x128>
 c40:	ac 01       	movw	r20, r24
 c42:	4e 5f       	subi	r20, 0xFE	; 254
 c44:	5f 4f       	sbci	r21, 0xFF	; 255
 c46:	24 17       	cp	r18, r20
 c48:	35 07       	cpc	r19, r21
 c4a:	48 f0       	brcs	.+18     	; 0xc5e <malloc+0x128>
 c4c:	4e 0f       	add	r20, r30
 c4e:	5f 1f       	adc	r21, r31
 c50:	50 93 d5 00 	sts	0x00D5, r21
 c54:	40 93 d4 00 	sts	0x00D4, r20
 c58:	81 93       	st	Z+, r24
 c5a:	91 93       	st	Z+, r25
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <malloc+0x12c>
 c5e:	e0 e0       	ldi	r30, 0x00	; 0
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	cf 01       	movw	r24, r30
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	08 95       	ret

00000c6a <free>:
 c6a:	cf 93       	push	r28
 c6c:	df 93       	push	r29
 c6e:	00 97       	sbiw	r24, 0x00	; 0
 c70:	09 f4       	brne	.+2      	; 0xc74 <free+0xa>
 c72:	91 c0       	rjmp	.+290    	; 0xd96 <free+0x12c>
 c74:	fc 01       	movw	r30, r24
 c76:	32 97       	sbiw	r30, 0x02	; 2
 c78:	13 82       	std	Z+3, r1	; 0x03
 c7a:	12 82       	std	Z+2, r1	; 0x02
 c7c:	60 91 d6 00 	lds	r22, 0x00D6
 c80:	70 91 d7 00 	lds	r23, 0x00D7
 c84:	61 15       	cp	r22, r1
 c86:	71 05       	cpc	r23, r1
 c88:	81 f4       	brne	.+32     	; 0xcaa <free+0x40>
 c8a:	20 81       	ld	r18, Z
 c8c:	31 81       	ldd	r19, Z+1	; 0x01
 c8e:	28 0f       	add	r18, r24
 c90:	39 1f       	adc	r19, r25
 c92:	80 91 d4 00 	lds	r24, 0x00D4
 c96:	90 91 d5 00 	lds	r25, 0x00D5
 c9a:	82 17       	cp	r24, r18
 c9c:	93 07       	cpc	r25, r19
 c9e:	99 f5       	brne	.+102    	; 0xd06 <free+0x9c>
 ca0:	f0 93 d5 00 	sts	0x00D5, r31
 ca4:	e0 93 d4 00 	sts	0x00D4, r30
 ca8:	76 c0       	rjmp	.+236    	; 0xd96 <free+0x12c>
 caa:	db 01       	movw	r26, r22
 cac:	80 e0       	ldi	r24, 0x00	; 0
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <free+0x4c>
 cb2:	cd 01       	movw	r24, r26
 cb4:	d9 01       	movw	r26, r18
 cb6:	ae 17       	cp	r26, r30
 cb8:	bf 07       	cpc	r27, r31
 cba:	48 f4       	brcc	.+18     	; 0xcce <free+0x64>
 cbc:	12 96       	adiw	r26, 0x02	; 2
 cbe:	2d 91       	ld	r18, X+
 cc0:	3c 91       	ld	r19, X
 cc2:	13 97       	sbiw	r26, 0x03	; 3
 cc4:	21 15       	cp	r18, r1
 cc6:	31 05       	cpc	r19, r1
 cc8:	a1 f7       	brne	.-24     	; 0xcb2 <free+0x48>
 cca:	cd 01       	movw	r24, r26
 ccc:	21 c0       	rjmp	.+66     	; 0xd10 <free+0xa6>
 cce:	b3 83       	std	Z+3, r27	; 0x03
 cd0:	a2 83       	std	Z+2, r26	; 0x02
 cd2:	ef 01       	movw	r28, r30
 cd4:	49 91       	ld	r20, Y+
 cd6:	59 91       	ld	r21, Y+
 cd8:	9e 01       	movw	r18, r28
 cda:	24 0f       	add	r18, r20
 cdc:	35 1f       	adc	r19, r21
 cde:	a2 17       	cp	r26, r18
 ce0:	b3 07       	cpc	r27, r19
 ce2:	79 f4       	brne	.+30     	; 0xd02 <free+0x98>
 ce4:	2d 91       	ld	r18, X+
 ce6:	3c 91       	ld	r19, X
 ce8:	11 97       	sbiw	r26, 0x01	; 1
 cea:	24 0f       	add	r18, r20
 cec:	35 1f       	adc	r19, r21
 cee:	2e 5f       	subi	r18, 0xFE	; 254
 cf0:	3f 4f       	sbci	r19, 0xFF	; 255
 cf2:	31 83       	std	Z+1, r19	; 0x01
 cf4:	20 83       	st	Z, r18
 cf6:	12 96       	adiw	r26, 0x02	; 2
 cf8:	2d 91       	ld	r18, X+
 cfa:	3c 91       	ld	r19, X
 cfc:	13 97       	sbiw	r26, 0x03	; 3
 cfe:	33 83       	std	Z+3, r19	; 0x03
 d00:	22 83       	std	Z+2, r18	; 0x02
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	29 f4       	brne	.+10     	; 0xd10 <free+0xa6>
 d06:	f0 93 d7 00 	sts	0x00D7, r31
 d0a:	e0 93 d6 00 	sts	0x00D6, r30
 d0e:	43 c0       	rjmp	.+134    	; 0xd96 <free+0x12c>
 d10:	dc 01       	movw	r26, r24
 d12:	13 96       	adiw	r26, 0x03	; 3
 d14:	fc 93       	st	X, r31
 d16:	ee 93       	st	-X, r30
 d18:	12 97       	sbiw	r26, 0x02	; 2
 d1a:	4d 91       	ld	r20, X+
 d1c:	5d 91       	ld	r21, X+
 d1e:	a4 0f       	add	r26, r20
 d20:	b5 1f       	adc	r27, r21
 d22:	ea 17       	cp	r30, r26
 d24:	fb 07       	cpc	r31, r27
 d26:	69 f4       	brne	.+26     	; 0xd42 <free+0xd8>
 d28:	20 81       	ld	r18, Z
 d2a:	31 81       	ldd	r19, Z+1	; 0x01
 d2c:	24 0f       	add	r18, r20
 d2e:	35 1f       	adc	r19, r21
 d30:	2e 5f       	subi	r18, 0xFE	; 254
 d32:	3f 4f       	sbci	r19, 0xFF	; 255
 d34:	ec 01       	movw	r28, r24
 d36:	39 83       	std	Y+1, r19	; 0x01
 d38:	28 83       	st	Y, r18
 d3a:	22 81       	ldd	r18, Z+2	; 0x02
 d3c:	33 81       	ldd	r19, Z+3	; 0x03
 d3e:	3b 83       	std	Y+3, r19	; 0x03
 d40:	2a 83       	std	Y+2, r18	; 0x02
 d42:	e0 e0       	ldi	r30, 0x00	; 0
 d44:	f0 e0       	ldi	r31, 0x00	; 0
 d46:	02 c0       	rjmp	.+4      	; 0xd4c <free+0xe2>
 d48:	fb 01       	movw	r30, r22
 d4a:	bc 01       	movw	r22, r24
 d4c:	db 01       	movw	r26, r22
 d4e:	12 96       	adiw	r26, 0x02	; 2
 d50:	8d 91       	ld	r24, X+
 d52:	9c 91       	ld	r25, X
 d54:	13 97       	sbiw	r26, 0x03	; 3
 d56:	00 97       	sbiw	r24, 0x00	; 0
 d58:	b9 f7       	brne	.-18     	; 0xd48 <free+0xde>
 d5a:	9b 01       	movw	r18, r22
 d5c:	2e 5f       	subi	r18, 0xFE	; 254
 d5e:	3f 4f       	sbci	r19, 0xFF	; 255
 d60:	8d 91       	ld	r24, X+
 d62:	9c 91       	ld	r25, X
 d64:	11 97       	sbiw	r26, 0x01	; 1
 d66:	82 0f       	add	r24, r18
 d68:	93 1f       	adc	r25, r19
 d6a:	40 91 d4 00 	lds	r20, 0x00D4
 d6e:	50 91 d5 00 	lds	r21, 0x00D5
 d72:	48 17       	cp	r20, r24
 d74:	59 07       	cpc	r21, r25
 d76:	79 f4       	brne	.+30     	; 0xd96 <free+0x12c>
 d78:	30 97       	sbiw	r30, 0x00	; 0
 d7a:	29 f4       	brne	.+10     	; 0xd86 <free+0x11c>
 d7c:	10 92 d7 00 	sts	0x00D7, r1
 d80:	10 92 d6 00 	sts	0x00D6, r1
 d84:	02 c0       	rjmp	.+4      	; 0xd8a <free+0x120>
 d86:	13 82       	std	Z+3, r1	; 0x03
 d88:	12 82       	std	Z+2, r1	; 0x02
 d8a:	22 50       	subi	r18, 0x02	; 2
 d8c:	30 40       	sbci	r19, 0x00	; 0
 d8e:	30 93 d5 00 	sts	0x00D5, r19
 d92:	20 93 d4 00 	sts	0x00D4, r18
 d96:	df 91       	pop	r29
 d98:	cf 91       	pop	r28
 d9a:	08 95       	ret

00000d9c <strcpy>:
 d9c:	fb 01       	movw	r30, r22
 d9e:	dc 01       	movw	r26, r24
 da0:	01 90       	ld	r0, Z+
 da2:	0d 92       	st	X+, r0
 da4:	00 20       	and	r0, r0
 da6:	e1 f7       	brne	.-8      	; 0xda0 <strcpy+0x4>
 da8:	08 95       	ret

00000daa <__eerd_byte_tn85>:
 daa:	e1 99       	sbic	0x1c, 1	; 28
 dac:	fe cf       	rjmp	.-4      	; 0xdaa <__eerd_byte_tn85>
 dae:	9f bb       	out	0x1f, r25	; 31
 db0:	8e bb       	out	0x1e, r24	; 30
 db2:	e0 9a       	sbi	0x1c, 0	; 28
 db4:	99 27       	eor	r25, r25
 db6:	8d b3       	in	r24, 0x1d	; 29
 db8:	08 95       	ret

00000dba <__eewr_byte_tn85>:
 dba:	26 2f       	mov	r18, r22

00000dbc <__eewr_r18_tn85>:
 dbc:	e1 99       	sbic	0x1c, 1	; 28
 dbe:	fe cf       	rjmp	.-4      	; 0xdbc <__eewr_r18_tn85>
 dc0:	1c ba       	out	0x1c, r1	; 28
 dc2:	9f bb       	out	0x1f, r25	; 31
 dc4:	8e bb       	out	0x1e, r24	; 30
 dc6:	2d bb       	out	0x1d, r18	; 29
 dc8:	0f b6       	in	r0, 0x3f	; 63
 dca:	f8 94       	cli
 dcc:	e2 9a       	sbi	0x1c, 2	; 28
 dce:	e1 9a       	sbi	0x1c, 1	; 28
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	01 96       	adiw	r24, 0x01	; 1
 dd4:	08 95       	ret

00000dd6 <_exit>:
 dd6:	f8 94       	cli

00000dd8 <__stop_program>:
 dd8:	ff cf       	rjmp	.-2      	; 0xdd8 <__stop_program>
